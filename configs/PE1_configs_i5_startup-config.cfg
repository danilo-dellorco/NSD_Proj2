!
!
!
!
!
!
service timestamps debug datetime msec
service timestamps log datetime msec
no service password-encryption
!
hostname PE1
!
ip cef
no ip domain-lookup
no ip icmp rate-limit unreachable
ip tcp synwait 5
no cdp log mismatch duplex
!
line con 0
 exec-timeout 0 0
 logging synchronous
 privilege level 15
 no login
line aux 0
 exec-timeout 0 0
 logging synchronous
 privilege level 15
 no login
!
!

# spoke
# creiamo una VRF per la VPN-A identificandola tramite Route Distinguisher 100:0, formato a due byte
# esportiamo gli annunci MP-iBGP prodotti dallo spoke (2) stesso ed esportiamo solo quelli prodotti dall'hub (1)
ip vrf vpnA
 rd 100:0
 route-target export 100:2
 route-target import 100:1
!

interface Loopback0
 ip address 1.1.1.1 255.255.255.255
!
interface g1/0
 ip address 100.0.10.1 255.255.255.252
 mpls ip
 no shutdown
!
interface g2/0
 ip address 100.0.11.2 255.255.255.252
 no shutdown
!

# abilitiamo il forwarding della VRF per VPN-A
# indichiamo al router quali customers si trovano dietro le sue interfacce 
# l'abilitazione rimuove l'indirizzo, quindi configuriamo direttamente qui l'interfaccia
interface g3/0
 ip vrf forwarding vpnA
 ip address 100.0.13.1 255.255.255.252
 no shutdown
!

# configuriamo un processo ospf su interfaccia di loopback
# qui il comand network richiede la wildcard mask (inverso subnet mask)
# specifichiamo le interfacce sulle quali inviare e ricevere update ospf
# definiamo le reti direttamente connesse per inviare messaggi
router ospf 1
 router-id 1
 network 1.1.1.1 0.0.0.0 area 0
 network 100.0.10.0 0.0.0.3 area 0
!

# configuriamo il processo BGP con eBGP su interfaccia fisica, iBGP su interfaccia di loopback
# qui il comando network specifica su quali reti localmente note pubblicare messaggi bgp
# update-source per usare interfaccia virtuale come interfaccia sorgente di aggiornamenti BGP
# altrimenti il messaggio viene inviato con l'IP dell'interfaccia fisica da cui esce
router bgp 100
 network 1.0.0.0
 neighbor 100.0.11.1 remote-as 200
 neighbor 1.1.1.2 remote-as 100
 neighbor 1.1.1.2 update-source Loopback0
 neighbor 1.1.1.2 next-hop-self
 neighbor 1.1.1.3 remote-as 100
 neighbor 1.1.1.3 update-source Loopback0
 neighbor 1.1.1.3 next-hop-self

# sub-configuration di BGP per indirizzi VPNv4, quindi per MP-iBGP
# specifichiamo nuovamente i vicini iBGP perchè ora stiamo identificando quelli che hanno una VPN connessa
# attiviamo il peering in questa speciale rete ed estendiamo il community attribute per inserire il route-target    
 address-family vpnv4
  neighbor 1.1.1.2 activate
  neighbor 1.1.1.2 send-community extended
  neighbor 1.1.1.2 next-hop-self
  neighbor 1.1.1.3 activate
  neighbor 1.1.1.3 send-community extended
  neighbor 1.1.1.3 next-hop-self
  exit-address-family
!
# esportiamo le rotte verso le reti private dietro i CEs
# le reti private che un PE gestisce vengono inserite negli annunci MP-iBGP 
 address-family ipv4 vrf vpnA
  network 10.23.1.0 mask 255.255.255.0
  exit-address-family
!

# fake route per startare BGP
# assicura che i pacchetti che non possono essere instradati verso 1.0.0.0 vengono scartati 
ip route 1.0.0.0 255.0.0.0 Null0

# adottiamo una configurazione statica fornendo manualmente una rotta il sito della VPN
# siamo costretti non avendo un protocollo di routing sul link PE-CE link
# la rotta è aggiunta nella VRF ed è inviata tramite update MP-iBGP (accettati dal solo hub)
ip route vrf vpnA 10.23.1.0 255.255.255.0 100.0.13.2

end

